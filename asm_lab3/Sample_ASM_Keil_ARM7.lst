


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------------
    2 00000000         ;-- License terms :
    3 00000000         ;-- You are free to use this code as long as you
    4 00000000         ;--  (i) DO NOT post it on any public repository;
    5 00000000         ;--  (ii) use it only for educational purposes;
    6 00000000         ;--  (iii) accept the responsibility to ensure that your
                        implementation does not violate any intellectual proper
                       ty of ARM Holdings or other entities.
    7 00000000         ;--  (iv) accept that the program is provided "as is" wi
                       thout warranty of any kind or assurance regarding its su
                       itability for any particular purpose;
    8 00000000         ;--  (v) send an email to rajesh.panicker@ieee.org brief
                       ly mentioning its use (except when used for the course C
                       G3207 at the National University of Singapore);
    9 00000000         ;--  (vi) retain this notice in this file or any files d
                       erived from this.
   10 00000000         ;-------------------------------------------------------
                       ---------------------------
   11 00000000         
   12 00000000                 AREA             MYCODE, CODE, READONLY, ALIGN=9
   13 00000000                 ENTRY
   14 00000000         
   15 00000000         ; ------- <code memory (ROM mapped to Instruction Memory
                       ) begins>
   16 00000000         ; Total number of instructions should not exceed 127 (12
                       6 excluding the last line 'halt B halt').
   17 00000000         
   18 00000000 E51F1008        LDR              R1, DIPS    ; Load the address 
                                                            of DIPS to R1 C04
   19 00000004 E51F2008        LDR              R2, LEDS    ; Load the address 
                                                            of LEDS to R2  C00
   20 00000008 E51F3008        LDR              R3, SEVEN_SEG ; Load the addres
                                                            s of SEVEN_SEG to R
                                                            3 C18
   21 0000000C         
   22 0000000C E51F7008        LDR              R7, constant1 ; 0xffffffff
   23 00000010 E51F8008        LDR              R8, constant2 ; 0
   24 00000014 E51F9008        LDR              R9, constant3 ; 1
   25 00000018         
   26 00000018 E00A0797        MUL              R10, R7, R7 ; FFFFFFFE00000001
   27 0000001C E582A000        STR              R10, [R2]   ; Store the value o
                                                            f R10 into LEDS
   28 00000020 E583A000        STR              R10, [R3]   ; Store the value o
                                                            f R10 into SEVEN_SE
                                                            G
   29 00000024         
   30 00000024 E00A0897        MUL              R10, R7, R8 ; 0
   31 00000028 E582A000        STR              R10, [R2]   ; Store the value o
                                                            f R10 into LEDS
   32 0000002C E583A000        STR              R10, [R3]   ; Store the value o
                                                            f R10 into SEVEN_SE
                                                            G
   33 00000030         
   34 00000030 E00A0997        MUL              R10, R7, R9 ; ffff ffff
   35 00000034 E582A000        STR              R10, [R2]   ; Store the value o
                                                            f R10 into LEDS
   36 00000038 E583A000        STR              R10, [R3]   ; Store the value o
                                                            f R10 into SEVEN_SE



ARM Macro Assembler    Page 2 


                                                            G
   37 0000003C         
   38 0000003C E02A7797        MLA              R10, R7, R7, R7 ; (1)
   39 00000040 E582A000        STR              R10, [R2]   ; Store the value o
                                                            f R10 into LEDS
   40 00000044 E583A000        STR              R10, [R3]   ; Store the value o
                                                            f R10 into SEVEN_SE
                                                            G
   41 00000048         
   42 00000048 E02A7997        MLA              R10, R7, R9, R7 ; ffff ffff
   43 0000004C E582A000        STR              R10, [R2]   ; Store the value o
                                                            f R8 into LEDS
   44 00000050 E583A000        STR              R10, [R3]   ; Store the value o
                                                            f R8 into SEVEN_SEG
                                                            
   45 00000054         
   46 00000054         LOOP_ANDS
   47 00000054 E5914000        LDR              R4, [R1]    ; Load the value of
                                                             DIPS 1010 (A)
   48 00000058 E5014004        STR              R4, [R1, #-4] ; Store the value
                                                             of R4 into LEDS
   49 0000005C E5814014        STR              R4, [R1, #20] ; Store the value
                                                             of R4 into SEVEN_S
                                                            EG
   50 00000060         
   51 00000060 E51F5008        LDR              R5, DELAY_VAL ; Load the delay 
                                                            value to R5 (2)
   52 00000064 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   53 00000068 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   54 0000006C         
   55 0000006C E00A0594        MUL              R10, R4, R5 ; 10x2 = 20
   56 00000070 E582A000        STR              R10, [R2]   ; Store the value o
                                                            f R10 into LEDS
   57 00000074 E583A000        STR              R10, [R3]   ; Store the value o
                                                            f R10 into SEVEN_SE
                                                            G
   58 00000078         
   59 00000078 E02A5594        MLA              R10, R4, R5, R5 ; 10/2 = 5
   60 0000007C E582A000        STR              R10, [R2]   ; Store the value o
                                                            f R10 into LEDS
   61 00000080 E583A000        STR              R10, [R3]   ; Store the value o
                                                            f R10 into SEVEN_SE
                                                            G
   62 00000084         
   63 00000084 E0844005        ADD              R4, R4, R5  ; R4 + R5 1100 (12)
                                                             (C)
   64 00000088 E5824000        STR              R4, [R2]    ; Store the value o
                                                            f R4 into LEDS
   65 0000008C E5834000        STR              R4, [R3]    ; Store the value o
                                                            f R4 into SEVEN_SEG
                                                            
   66 00000090         
   67 00000090 E1844005        ORR              R4, R4, R5  ; R4 | R5 1110 (14)
                                                             (E)
   68 00000094 E5824000        STR              R4, [R2]    ; Store the value o
                                                            f R4 into LEDS



ARM Macro Assembler    Page 3 


   69 00000098 E5834000        STR              R4, [R3]    ; Store the value o
                                                            f R4 into SEVEN_SEG
                                                            
   70 0000009C         
   71 0000009C E0856124        ADD              R6, R5, R4, LSR #2 ; R6 = 2 + 3
                                                             (1110 >> 2) (5)
   72 000000A0 E5826000        STR              R6, [R2]    ; Store the value o
                                                            f R6 into LEDS
   73 000000A4 E5836000        STR              R6, [R3]    ; Store the value o
                                                            f R6 into SEVEN_SEG
                                                            
   74 000000A8         
   75 000000A8         LOOP_SUBS
   76 000000A8 E2555001        SUBS             R5, R5, #1  ; Decrease the dala
                                                            y counter by 1 (1) 
                                                            (0)
   77 000000AC E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   78 000000B0 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   79 000000B4 1AFFFFFB        BNE              LOOP_SUBS
   80 000000B8         
   81 000000B8 E51F5008        LDR              R5, DELAY_VAL ; Load the delay 
                                                            value to R5 (2)
   82 000000BC E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   83 000000C0 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   84 000000C4         
   85 000000C4 E3550002        CMP              R5, #2      ; R5 unchanged (2)
   86 000000C8 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   87 000000CC E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   88 000000D0         
   89 000000D0 02555002        SUBSEQ           R5, R5, #2  ; R5 = 2 - 2 (0)
   90 000000D4 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   91 000000D8 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   92 000000DC         
   93 000000DC 03855002        ORREQ            R5, R5, #2  ; R5 = 00|10 (2)
   94 000000E0 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   95 000000E4 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   96 000000E8         
   97 000000E8 E3550002        CMN              R5, #-2     ; R5 unchanged (2)
   98 000000EC 02155000        ANDSEQ           R5, R5, #0  ; R5 = 10&00 (0)
   99 000000F0 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
  100 000000F4 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            



ARM Macro Assembler    Page 4 


  101 000000F8 0AFFFFD5        BEQ              LOOP_ANDS
  102 000000FC         
  103 000000FC         halt
  104 000000FC EAFFFFFE        B                halt        ; infinite loop to 
                                                            halt computation. /
                                                            / A program should 
                                                            not "terminate" wit
                                                            hout an operating s
                                                            ystem to return con
                                                            trol to
  105 00000100         ; keep halt B halt as the last line of your code.
  106 00000100         ; ------- <\code memory (ROM mapped to Instruction Memor
                       y) ends>
  107 00000100         
  108 00000100         
  109 00000100                 AREA             CONSTANTS, DATA, READONLY, ALIG
N=9
  110 00000000         ; ------- <constant memory (ROM mapped to Data Memory) b
                       egins>
  111 00000000         ; All constants should be declared in this section. This
                        section is read only (Only LDR, no STR).
  112 00000000         ; Total number of constants should not exceed 128 (124 e
                       xcluding the 4 used for peripheral pointers).
  113 00000000         ; If a variable is accessed multiple times, it is better
                        to store the address in a register and use it rather th
                       an load it repeatedly.
  114 00000000         
  115 00000000         ;Peripheral pointers
  116 00000000         LEDS
  117 00000000 00000C00        DCD              0x00000C00  ; Address of LEDs. 
                                                            //volatile unsigned
                                                             int * const LEDS =
                                                             (unsigned int*)0x0
                                                            0000C00;  
  118 00000004         DIPS
  119 00000004 00000C04        DCD              0x00000C04  ; Address of DIP sw
                                                            itches. //volatile 
                                                            unsigned int * cons
                                                            t DIPS = (unsigned 
                                                            int*)0x00000C04;
  120 00000008         PBS
  121 00000008 00000C08        DCD              0x00000C08  ; Address of Push B
                                                            uttons. Used only i
                                                            n Lab 2
  122 0000000C         UART
  123 0000000C 00000C0C        DCD              0x00000C0C  ; Address of UART. 
                                                            Used only in Lab 2
  124 00000010         SEVEN_SEG
  125 00000010 00000C18        DCD              0x00000C18  ; Address of Seven 
                                                            segment
  126 00000014         
  127 00000014         ; Rest of the constants should be declared below.
  128 00000014         DELAY_VAL
  129 00000014 00000002        DCD              0x2         ; The number of ste
                                                            ps of delay // cons
                                                            t unsigned int DELA
                                                            Y_VAL = 4;
  130 00000018         variable1_addr
  131 00000018 00000000        DCD              variable1   ; address of variab



ARM Macro Assembler    Page 5 


                                                            le1. Required since
                                                             we are avoiding ps
                                                            eudo-instructions /
                                                            / unsigned int * co
                                                            nst variable1_addr 
                                                            = &variable1;
  132 0000001C         variable2_addr
  133 0000001C 00000000        DCD              variable2
  134 00000020         constant1
  135 00000020 FFFFFFFF        DCD              0xFFFFFFFF  ; // const unsigned
                                                             int constant1 = 0x
                                                            ABCD1234;
  136 00000024         constant2
  137 00000024 00000000        DCD              0x00000000
  138 00000028         constant3
  139 00000028 00000001        DCD              0x00000001
  140 0000002C         string1
  141 0000002C 48 65 6C 
              6C 6F 20 
              57 6F 72 
              6C 64 21 
              21 21 21 
              00               DCB              "Hello World!!!!",0 ; // unsign
                                                            ed char string1[] =
                                                             "Hello World!"; //
                                                             assembler will iss
                                                            ue a warning if the
                                                             string size is not
                                                             a multiple of 4, b
                                                            ut the warning is s
                                                            afe to ignore
  142 0000003C         
  143 0000003C         ; ------- <constant memory (ROM mapped to Data Memory) e
                       nds> 
  144 0000003C         
  145 0000003C         
  146 0000003C                 AREA             VARIABLES, DATA, READWRITE, ALI
GN=9
  147 00000000         ; ------- <variable memory (RAM mapped to Data Memory) b
                       egins>
  148 00000000         ; All variables should be declared in this section. This
                        section is read-write.
  149 00000000         ; Total number of variables should not exceed 128. 
  150 00000000         ; No initialization possible in this region. In other wo
                       rds, you should write to a location before you can read 
                       from it (i.e., write to a location using STR before read
                       ing using LDR).
  151 00000000         
  152 00000000         variable1
  153 00000000 00000800        DCD              0x00000800  ;  // unsigned int 
                                                            variable1;
  154 00000004         
  155 00000004         variable2
  156 00000004 00000804        DCD              0x00000804
  157 00000008         
  158 00000008         ; ------- <variable memory (RAM mapped to Data Memory) e
                       nds> 
  159 00000008         
  160 00000008                 END



ARM Macro Assembler    Page 6 


Command Line: --debug --xref --apcs=interwork --depend=.\Sample_ASM_Keil_ARM7.d
 -o.\Sample_ASM_Keil_ARM7.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include 
--predefine="__EVAL SETA 1" --list=.\Sample_ASM_Keil_ARM7.lst C:\Keil\Lab\Sampl
e_ASM_Keil_ARM7.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LOOP_ANDS 00000054

Symbol: LOOP_ANDS
   Definitions
      At line 46 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 101 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: LOOP_ANDS used once
LOOP_SUBS 000000A8

Symbol: LOOP_SUBS
   Definitions
      At line 75 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 79 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: LOOP_SUBS used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 12 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: MYCODE unused
halt 000000FC

Symbol: halt
   Definitions
      At line 103 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 104 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: halt used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONSTANTS 00000000

Symbol: CONSTANTS
   Definitions
      At line 109 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: CONSTANTS unused
DELAY_VAL 00000014

Symbol: DELAY_VAL
   Definitions
      At line 128 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 51 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
      At line 81 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s

DIPS 00000004

Symbol: DIPS
   Definitions
      At line 118 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 18 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: DIPS used once
LEDS 00000000

Symbol: LEDS
   Definitions
      At line 116 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 19 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: LEDS used once
PBS 00000008

Symbol: PBS
   Definitions
      At line 120 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: PBS unused
SEVEN_SEG 00000010

Symbol: SEVEN_SEG
   Definitions
      At line 124 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 20 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: SEVEN_SEG used once
UART 0000000C

Symbol: UART
   Definitions
      At line 122 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: UART unused
constant1 00000020




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: constant1
   Definitions
      At line 134 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 22 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: constant1 used once
constant2 00000024

Symbol: constant2
   Definitions
      At line 136 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 23 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: constant2 used once
constant3 00000028

Symbol: constant3
   Definitions
      At line 138 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 24 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: constant3 used once
string1 0000002C

Symbol: string1
   Definitions
      At line 140 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: string1 unused
variable1_addr 00000018

Symbol: variable1_addr
   Definitions
      At line 130 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: variable1_addr unused
variable2_addr 0000001C

Symbol: variable2_addr
   Definitions
      At line 132 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: variable2_addr unused
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

VARIABLES 00000000

Symbol: VARIABLES
   Definitions
      At line 146 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: VARIABLES unused
variable1 00000000

Symbol: variable1
   Definitions
      At line 152 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 131 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: variable1 used once
variable2 00000004

Symbol: variable2
   Definitions
      At line 155 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 133 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: variable2 used once
3 symbols
351 symbols in table
