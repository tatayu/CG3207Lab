


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------------
    2 00000000         ;-- License terms :
    3 00000000         ;-- You are free to use this code as long as you
    4 00000000         ;--  (i) DO NOT post it on any public repository;
    5 00000000         ;--  (ii) use it only for educational purposes;
    6 00000000         ;--  (iii) accept the responsibility to ensure that your
                        implementation does not violate any intellectual proper
                       ty of ARM Holdings or other entities.
    7 00000000         ;--  (iv) accept that the program is provided "as is" wi
                       thout warranty of any kind or assurance regarding its su
                       itability for any particular purpose;
    8 00000000         ;--  (v) send an email to rajesh.panicker@ieee.org brief
                       ly mentioning its use (except when used for the course C
                       G3207 at the National University of Singapore);
    9 00000000         ;--  (vi) retain this notice in this file or any files d
                       erived from this.
   10 00000000         ;-------------------------------------------------------
                       ---------------------------
   11 00000000         
   12 00000000                 AREA             MYCODE, CODE, READONLY, ALIGN=9
   13 00000000                 ENTRY
   14 00000000         
   15 00000000         ; ------- <code memory (ROM mapped to Instruction Memory
                       ) begins>
   16 00000000         ; Total number of instructions should not exceed 127 (12
                       6 excluding the last line 'halt B halt').
   17 00000000         
   18 00000000 E51F1008        LDR              R1, DIPS    ; Load the address 
                                                            of DIPS to R1 C04
   19 00000004 E51F2008        LDR              R2, LEDS    ; Load the address 
                                                            of LEDS to R2  C00
   20 00000008 E51F3008        LDR              R3, SEVEN_SEG ; Load the addres
                                                            s of SEVEN_SEG to R
                                                            3 C18
   21 0000000C         
   22 0000000C         LOOP_ANDS
   23 0000000C E5914000        LDR              R4, [R1]    ; Load the value of
                                                             DIPS 1010 (A)
   24 00000010 E5014004        STR              R4, [R1, #-4] ; Store the value
                                                             of R4 into LEDS
   25 00000014 E5814014        STR              R4, [R1, #20] ; Store the value
                                                             of R4 into SEVEN_S
                                                            EG
   26 00000018         
   27 00000018 E51F5008        LDR              R5, DELAY_VAL ; Load the delay 
                                                            value to R5 (2)
   28 0000001C E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   29 00000020 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   30 00000024         
   31 00000024 E0844005        ADD              R4, R4, R5  ; R4 + R5 1100 (12)
                                                             (C)
   32 00000028 E5824000        STR              R4, [R2]    ; Store the value o
                                                            f R4 into LEDS
   33 0000002C E5834000        STR              R4, [R3]    ; Store the value o
                                                            f R4 into SEVEN_SEG



ARM Macro Assembler    Page 2 


                                                            
   34 00000030         
   35 00000030 E1844005        ORR              R4, R4, R5  ; R4 | R5 1110 (14)
                                                             (E)
   36 00000034 E5824000        STR              R4, [R2]    ; Store the value o
                                                            f R4 into LEDS
   37 00000038 E5834000        STR              R4, [R3]    ; Store the value o
                                                            f R4 into SEVEN_SEG
                                                            
   38 0000003C         
   39 0000003C E0856124        ADD              R6, R5, R4, LSR #2 ; R6 = 2 + 3
                                                             (1110 >> 2) (5)
   40 00000040 E5826000        STR              R6, [R2]    ; Store the value o
                                                            f R6 into LEDS
   41 00000044 E5836000        STR              R6, [R3]    ; Store the value o
                                                            f R6 into SEVEN_SEG
                                                            
   42 00000048         
   43 00000048         LOOP_SUBS
   44 00000048 E2555001        SUBS             R5, R5, #1  ; Decrease the dala
                                                            y counter by 1 (1) 
                                                            (0)
   45 0000004C E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   46 00000050 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   47 00000054 1AFFFFFB        BNE              LOOP_SUBS
   48 00000058         
   49 00000058 E51F5008        LDR              R5, DELAY_VAL ; Load the delay 
                                                            value to R5 (2)
   50 0000005C E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   51 00000060 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   52 00000064         
   53 00000064 E3550002        CMP              R5, #2      ; R5 unchanged (2)
   54 00000068 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   55 0000006C E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   56 00000070         
   57 00000070 02555002        SUBSEQ           R5, R5, #2  ; R5 = 2 - 2 (0)
   58 00000074 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   59 00000078 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   60 0000007C         
   61 0000007C 03855002        ORREQ            R5, R5, #2  ; R5 = 00|10 (2)
   62 00000080 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   63 00000084 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   64 00000088         
   65 00000088 E3550002        CMN              R5, #-2     ; R5 unchanged (2)



ARM Macro Assembler    Page 3 


   66 0000008C 02155000        ANDSEQ           R5, R5, #0  ; R5 = 10&00 (0)
   67 00000090 E5825000        STR              R5, [R2]    ; Store the value o
                                                            f R5 into LEDS
   68 00000094 E5835000        STR              R5, [R3]    ; Store the value o
                                                            f R5 into SEVEN_SEG
                                                            
   69 00000098 0AFFFFDB        BEQ              LOOP_ANDS
   70 0000009C         
   71 0000009C         halt
   72 0000009C EAFFFFFE        B                halt        ; infinite loop to 
                                                            halt computation. /
                                                            / A program should 
                                                            not "terminate" wit
                                                            hout an operating s
                                                            ystem to return con
                                                            trol to
   73 000000A0         ; keep halt B halt as the last line of your code.
   74 000000A0         ; ------- <\code memory (ROM mapped to Instruction Memor
                       y) ends>
   75 000000A0         
   76 000000A0         
   77 000000A0                 AREA             CONSTANTS, DATA, READONLY, ALIG
N=9
   78 00000000         ; ------- <constant memory (ROM mapped to Data Memory) b
                       egins>
   79 00000000         ; All constants should be declared in this section. This
                        section is read only (Only LDR, no STR).
   80 00000000         ; Total number of constants should not exceed 128 (124 e
                       xcluding the 4 used for peripheral pointers).
   81 00000000         ; If a variable is accessed multiple times, it is better
                        to store the address in a register and use it rather th
                       an load it repeatedly.
   82 00000000         
   83 00000000         ;Peripheral pointers
   84 00000000         LEDS
   85 00000000 00000C00        DCD              0x00000C00  ; Address of LEDs. 
                                                            //volatile unsigned
                                                             int * const LEDS =
                                                             (unsigned int*)0x0
                                                            0000C00;  
   86 00000004         DIPS
   87 00000004 00000C04        DCD              0x00000C04  ; Address of DIP sw
                                                            itches. //volatile 
                                                            unsigned int * cons
                                                            t DIPS = (unsigned 
                                                            int*)0x00000C04;
   88 00000008         PBS
   89 00000008 00000C08        DCD              0x00000C08  ; Address of Push B
                                                            uttons. Used only i
                                                            n Lab 2
   90 0000000C         UART
   91 0000000C 00000C0C        DCD              0x00000C0C  ; Address of UART. 
                                                            Used only in Lab 2
   92 00000010         SEVEN_SEG
   93 00000010 00000C18        DCD              0x00000C18  ; Address of Seven 
                                                            segment
   94 00000014         
   95 00000014         ; Rest of the constants should be declared below.
   96 00000014         DELAY_VAL



ARM Macro Assembler    Page 4 


   97 00000014 00000002        DCD              0x2         ; The number of ste
                                                            ps of delay // cons
                                                            t unsigned int DELA
                                                            Y_VAL = 4;
   98 00000018         variable1_addr
   99 00000018 00000000        DCD              variable1   ; address of variab
                                                            le1. Required since
                                                             we are avoiding ps
                                                            eudo-instructions /
                                                            / unsigned int * co
                                                            nst variable1_addr 
                                                            = &variable1;
  100 0000001C         variable2_addr
  101 0000001C 00000000        DCD              variable2
  102 00000020         constant1
  103 00000020 ABCD1234        DCD              0xABCD1234  ; // const unsigned
                                                             int constant1 = 0x
                                                            ABCD1234;
  104 00000024         string1
  105 00000024 48 65 6C 
              6C 6F 20 
              57 6F 72 
              6C 64 21 
              21 21 21 
              00               DCB              "Hello World!!!!",0 ; // unsign
                                                            ed char string1[] =
                                                             "Hello World!"; //
                                                             assembler will iss
                                                            ue a warning if the
                                                             string size is not
                                                             a multiple of 4, b
                                                            ut the warning is s
                                                            afe to ignore
  106 00000034         
  107 00000034         ; ------- <constant memory (ROM mapped to Data Memory) e
                       nds> 
  108 00000034         
  109 00000034         
  110 00000034                 AREA             VARIABLES, DATA, READWRITE, ALI
GN=9
  111 00000000         ; ------- <variable memory (RAM mapped to Data Memory) b
                       egins>
  112 00000000         ; All variables should be declared in this section. This
                        section is read-write.
  113 00000000         ; Total number of variables should not exceed 128. 
  114 00000000         ; No initialization possible in this region. In other wo
                       rds, you should write to a location before you can read 
                       from it (i.e., write to a location using STR before read
                       ing using LDR).
  115 00000000         
  116 00000000         variable1
  117 00000000 00000800        DCD              0x00000800  ;  // unsigned int 
                                                            variable1;
  118 00000004         
  119 00000004         variable2
  120 00000004 00000804        DCD              0x00000804
  121 00000008         
  122 00000008         ; ------- <variable memory (RAM mapped to Data Memory) e
                       nds> 



ARM Macro Assembler    Page 5 


  123 00000008         
  124 00000008                 END
Command Line: --debug --xref --apcs=interwork --depend=.\Sample_ASM_Keil_ARM7.d
 -o.\Sample_ASM_Keil_ARM7.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include 
--predefine="__EVAL SETA 1" --list=.\Sample_ASM_Keil_ARM7.lst C:\Keil\Lab\Sampl
e_ASM_Keil_ARM7.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LOOP_ANDS 0000000C

Symbol: LOOP_ANDS
   Definitions
      At line 22 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 69 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: LOOP_ANDS used once
LOOP_SUBS 00000048

Symbol: LOOP_SUBS
   Definitions
      At line 43 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 47 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: LOOP_SUBS used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 12 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: MYCODE unused
halt 0000009C

Symbol: halt
   Definitions
      At line 71 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 72 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: halt used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONSTANTS 00000000

Symbol: CONSTANTS
   Definitions
      At line 77 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: CONSTANTS unused
DELAY_VAL 00000014

Symbol: DELAY_VAL
   Definitions
      At line 96 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 27 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
      At line 49 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s

DIPS 00000004

Symbol: DIPS
   Definitions
      At line 86 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 18 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: DIPS used once
LEDS 00000000

Symbol: LEDS
   Definitions
      At line 84 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 19 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: LEDS used once
PBS 00000008

Symbol: PBS
   Definitions
      At line 88 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: PBS unused
SEVEN_SEG 00000010

Symbol: SEVEN_SEG
   Definitions
      At line 92 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 20 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: SEVEN_SEG used once
UART 0000000C

Symbol: UART
   Definitions
      At line 90 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: UART unused
constant1 00000020




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: constant1
   Definitions
      At line 102 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: constant1 unused
string1 00000024

Symbol: string1
   Definitions
      At line 104 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: string1 unused
variable1_addr 00000018

Symbol: variable1_addr
   Definitions
      At line 98 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: variable1_addr unused
variable2_addr 0000001C

Symbol: variable2_addr
   Definitions
      At line 100 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: variable2_addr unused
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

VARIABLES 00000000

Symbol: VARIABLES
   Definitions
      At line 110 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      None
Comment: VARIABLES unused
variable1 00000000

Symbol: variable1
   Definitions
      At line 116 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 99 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: variable1 used once
variable2 00000004

Symbol: variable2
   Definitions
      At line 119 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
   Uses
      At line 101 in file C:\Keil\Lab\Sample_ASM_Keil_ARM7.s
Comment: variable2 used once
3 symbols
349 symbols in table
